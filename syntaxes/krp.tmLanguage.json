{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "krp syntax",
    "patterns": [
        {
            "patterns": [
                {
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))def|set|get|calc|copy|delete|if|delayedcall|stopdelayedcall|nexttick|callwhen|stopcallwhen|for|loop|asyncloop|renderloop|stoprenderloop|setinterval|clearinterval|toggle|switch|break|exitcall|callwith|scope|parentscopeset|linkeventscope|assignstyle|copyattributes(?=\\s*\\();",
                    "name": "keyword.control.krp"
                },
                {
                    "name": "entity.name.function.krp",
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))add|sub|mul|div|mod|pow|inc|dec|clamp|(?=\\s*\\();"
                },
                {
                    "match": "(?x)(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(Math)(?:\\s*(?:(\\.)|(\\?\\.(?!\\s*[[:digit:]])))\\s*(?:\n  (abs|acos|asin|atan|atan2|ceil|cos|exp|floor|log|max|min|pow|round|sin|sqrt|tan)\n ))?\\b(?!\\$)",
                    "captures": {
                        "1": {
                            "name": "support.constant.math.krp"
                        },
                        "2": {
                            "name": "punctuation.accessor.krp"
                        },
                        "3": {
                            "name": "punctuation.accessor.optional.krp"
                        },
                        "4": {
                            "name": "support.function.math.krp"
                        }
                    }
                }
            ]
        },
        {
            "name": "support.type.builtin.krp",
            "match": "\\b(true|false|null)\\b"
        },
        {
            "name": "comment.line.double-slash.krp",
            "begin": "//",
            "end": "\\n"
        },
        {
            "match": "(?<=[_$[:alnum:]])(AND|OR|LT|GT|and|or|lt|gt|\\=|\\!|\\+|\\-|\\*|/)\\s*(?:(/=)|(?:(/)(?![/*])))",
            "captures": {
                "1": {
                    "name": "keyword.operator.logical.js"
                }
            }
        },
        {
            "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*(n)?\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)(n)?\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*(n)?\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*(n)?\\b(?!\\.))                                 # 1\n)(?!\\$)",
            "captures": {
                "0": {
                    "name": "constant.numeric.decimal.js"
                },
                "1": {
                    "name": "meta.delimiter.decimal.period.js"
                },
                "2": {
                    "name": "storage.type.numeric.bigint.js"
                },
                "3": {
                    "name": "meta.delimiter.decimal.period.js"
                },
                "4": {
                    "name": "storage.type.numeric.bigint.js"
                },
                "5": {
                    "name": "meta.delimiter.decimal.period.js"
                },
                "6": {
                    "name": "storage.type.numeric.bigint.js"
                },
                "7": {
                    "name": "storage.type.numeric.bigint.js"
                },
                "8": {
                    "name": "meta.delimiter.decimal.period.js"
                },
                "9": {
                    "name": "storage.type.numeric.bigint.js"
                },
                "10": {
                    "name": "meta.delimiter.decimal.period.js"
                },
                "11": {
                    "name": "storage.type.numeric.bigint.js"
                },
                "12": {
                    "name": "meta.delimiter.decimal.period.js"
                },
                "13": {
                    "name": "storage.type.numeric.bigint.js"
                },
                "14": {
                    "name": "storage.type.numeric.bigint.js"
                }
            }
        },
        {
            "name": "string.quoted.single.krp",
            "begin": "'",
            "end": "'"
        },
        {
            "match": "\\[([a-zA-Z0-9_]{1,})\\]",
            "captures": {
                "1": {
                    "name": "keyword.operator.logical.krp"
                }
            }
        }
    ],
    "scopeName": "source.krp"
}